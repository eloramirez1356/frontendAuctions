import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { async } from 'q';
import { addWinner } from '../api';


class ProvingProofOfWinner extends Component {
    constructor (props) {
        super(props);
        this.state = {
            hasError: false,
            showSending: false,
            proofOfWinner: '',
        }
        this.handleProvingProofOfWinner = this.handleProvingProofOfWinner.bind(this);
        this.handleProvingProofOfWinnerChange = this.handleProvingProofOfWinnerChange.bind(this);
        }

    handleProvingProofOfWinnerChange (field){
        return (event) => {
            this.setState({
                [field]: event.target.value
            })
        }
    }


    validation(app){
        if(app.proofOfWinner.length > 0){
            return true;
        } else {
            return false;
        }
    }

    handleProvingProofOfWinner(e){
        e.preventDefault();
        const { onClose, contract, account } = this.props;
        console.log(this.state.proofOfWinner);
        const parsedProofOfWinner = JSON.parse(this.state.proofOfWinner); 
        
        if(this.validation(this.state)){
            this.setState({showSending:true});
            (async () => {
                contract.methods.auctionEnd(parsedProofOfWinner.proof.a, parsedProofOfWinner.proof.b, parsedProofOfWinner.proof.c, parsedProofOfWinner.inputs).send({from: account, gas:3000000}, (error, result) => {
                    if(!error){
                        alert("The proof submited is correct and the winner has been selected: " + result);
                    }else{
                        alert("The proof submited is incorrect, please follow the instructions: " + error);
                    }
                });
              })().then(onClose(true));
        }else{
            this.setState({
                hasError:true
            })
        }
    }


    render() {
        const { showSending, proofOfWinner, hasError} = this.state;
        const {onClose} = this.props;
        return (<div className="modal">
            <div className="modal-content">
                <span className="close" onClick={onClose(false)}>&times;</span>
                <h2>Placing a bid</h2>
                { showSending && (<span className="success"> Enviando... </span>)}
                { hasError && (<div className="error"> Some fields are empty or contain an wrong values. </div>)}
                <form>
                    <label>Proof generated by ZoKrates</label>
                    <input type="text" value={proofOfWinner} onChange={this.handleProvingProofOfWinnerChange("proofOfWinner")} minLength="3" maxLength="2000" required/>
                    <input type="submit" onClick={this.handleProvingProofOfWinner} value="Submit" disabled={showSending}/>
                </form>
            </div>
        </div>);
    }
}

ProvingProofOfWinner.propTypes = {
    onClose: PropTypes.func.isRequired,
    contract: PropTypes.object.isRequired,
};

export default ProvingProofOfWinner;